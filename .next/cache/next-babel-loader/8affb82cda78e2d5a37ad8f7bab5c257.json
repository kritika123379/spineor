{"ast":null,"code":"import firebase from '../../../lib/myFirebase';\nexport const getListings = async () => {\n  try {\n    // let previous = false;\n    // let w = await createWhereClauses({ appliedFilters });\n    let query = firebase.collection(\"listings\"); // for (let i of w) {\n    // \tquery = query.where(...i);\n    // }\n    // //query = query.where(\"PropertyType\",\"All\");\n\n    query = query.orderBy(\"LastChangeTimestamp\", \"desc\"); //Matrix_Unique_ID\n    // if (fetchPrevious) {\n    // \tquery = query.endBefore(firstListing);\n    // }\n    // if (startAfter) {\n    // \tquery = query.startAfter(lastListing);\n    // \tprevious = true;\n    // }\n\n    return await query.limit(10).get().then(async res => {\n      // count = count + 1;\n      // var circularObj = {};\n      // circularObj.circularRef = res.docs[res.docs.length-1];\n      // circularObj.list = [ circularObj, circularObj ];\n      // lastListing = res.docs[res.docs.length - 1];\n      // if(count%2 === 0 || count === 1){\n      // \tif(count !== 2){\n      // firstListing = res.docs[0];\n      // \t}\n      // }\n      const data = res.docs.map(doc => {\n        return doc.data();\n      });\n      return data; // dispatch(saveFirstListObj({ data: data[0] }));\n      // dispatch(getListingSuccess({ data, previous }));\n    });\n  } catch (error) {\n    console.error(\"error getListings =>\", error);\n    return error;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}